/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systems.tech247.menus;

import java.awt.BorderLayout;
import java.util.Collection;
import javax.swing.BorderFactory;




import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.StatusDisplayer;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.OutlineView;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import systems.tech247.security.HRModule;
import systems.tech247.security.UtilitySecurity;



/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//systems.tech247.menus//AppMenu//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "AppMenuTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "systems.tech247.menus.AppMenuTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_AppMenuAction",
        preferredID = "AppMenuTopComponent"
)
@Messages({
    "CTL_AppMenuAction=AppMenu",
    "CTL_AppMenuTopComponent=AppMenu Window",
    "HINT_AppMenuTopComponent=This is a AppMenu window"
})
public final class AppMenuTopComponent extends TopComponent 
        implements LookupListener,ExplorerManager.Provider {
        
        ExplorerManager em = UtilitySecurity.emSCRApps;
        Lookup.Result<HRModule> result;
    //private DateFormat formatter = new SimpleDateFormat("G");
    

    public AppMenuTopComponent() {
        initComponents();
        setDisplayName("Available Apps");
        appViewer.setLayout(new BorderLayout());
        
        OutlineView ov = new OutlineView("Available Apps");
        ov.setBorder(BorderFactory.createEmptyBorder());
        ov.getOutline().setRootVisible(false);
        appViewer.add(ov, BorderLayout.CENTER);
        associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
        //CetusUtility.requireLogin();
        
        
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appViewer = new javax.swing.JPanel();

        appViewer.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout appViewerLayout = new javax.swing.GroupLayout(appViewer);
        appViewer.setLayout(appViewerLayout);
        appViewerLayout.setHorizontalGroup(
            appViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );
        appViewerLayout.setVerticalGroup(
            appViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appViewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appViewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel appViewer;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        
        result = getLookup().lookupResult(HRModule.class);
        resultChanged(new LookupEvent(result));
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return em;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Lookup.Result<HRModule> r = (Lookup.Result<HRModule>)le.getSource();
        Collection<HRModule> c = (Collection<HRModule>) r.allInstances();
        if(!c.isEmpty()){
            for(HRModule app : c){
                StatusDisplayer.getDefault().setStatusText(app.getModule().getModuleCode()+"-"+app.getModule().getModuleID());
            }
        }
    }
    
    
}
