/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systems.tech247.menus;

import java.awt.BorderLayout;
import java.util.Collection;
import javax.swing.JButton;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.StatusDisplayer;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;
import systems.tech247.security.HRModule;


/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//systems.tech247.menus//AppLaunch//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "AppLaunchTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "systems.tech247.menus.AppLaunchTopComponent")
//@ActionReference(path = "Menu/Window" /*, position = 333 */)
//@TopComponent.OpenActionRegistration(
//        displayName = "#CTL_AppLaunchAction",
//        preferredID = "AppLaunchTopComponent"
//)
@Messages({
    "CTL_AppLaunchAction=AppLaunch",
    "CTL_AppLaunchTopComponent=Application Launch",
    "HINT_AppLaunchTopComponent=This is the Application Launch window"
})
public final class AppLaunchTopComponent extends TopComponent
    implements LookupListener{
    Lookup.Result<HRModule> result;
    JButton launchButton = new JButton("Select An Application");
    public AppLaunchTopComponent() {
        initComponents();
        setName(Bundle.CTL_AppLaunchTopComponent());
        setToolTipText(Bundle.HINT_AppLaunchTopComponent());
        setLayout(new BorderLayout());
        launchButton.setEnabled(false);
        launchButton.setSize(20, 20);
        add(launchButton, BorderLayout.CENTER);
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        TopComponent tc = WindowManager.getDefault().findTopComponent("AppMenuTopComponent");
        result = tc.getLookup().lookupResult(HRModule.class);
        resultChanged(new LookupEvent(result));
        result.addLookupListener(this);
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        
        Lookup.Result<HRModule> r = (Lookup.Result<HRModule>)le.getSource();
        Collection<HRModule> c = (Collection<HRModule>) r.allInstances();
        if(!c.isEmpty()){
            for(HRModule app : c){
                StatusDisplayer.getDefault().setStatusText(app.getModule().getModuleCode()+" "+app.getModule().getModuleID());
                launchButton.setEnabled(true);
                launchButton.setText("Run "+ app.getModule().getModuleName());
                
                
            }
        }
        
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
